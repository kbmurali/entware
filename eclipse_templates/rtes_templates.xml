<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="org.erlide.ui.erlangsource.template.context.module" deleted="false" description="RTES Common Test Suite" enabled="true" name="rtes_common_test_suite">%%%-------------------------------------------------------------------&#13;
%%% Author  : ${user}&#13;
%%% Description : ${module}&#13;
%%%&#13;
%%% Created : ${date}&#13;
%%%-------------------------------------------------------------------&#13;
-module(${module}).&#13;
&#13;
%% Note: This directive should only be used in test suites.&#13;
-compile(export_all).&#13;
&#13;
-include_lib("common_test/include/ct.hrl").&#13;
&#13;
%%--------------------------------------------------------------------&#13;
%% COMMON TEST CALLBACK FUNCTIONS&#13;
%%--------------------------------------------------------------------&#13;
&#13;
%%--------------------------------------------------------------------&#13;
%% Function: suite() -&gt; Info&#13;
%%&#13;
%% Info = [tuple()]&#13;
%%   List of key/value pairs.&#13;
%%&#13;
%% Description: Returns list of tuples to set default properties&#13;
%%              for the suite.&#13;
%%&#13;
%% Note: The suite/0 function is only meant to be used to return&#13;
%% default data values, not perform any other operations.&#13;
%%--------------------------------------------------------------------&#13;
suite() -&gt;&#13;
    [{timetrap,{minutes,10}}].&#13;
&#13;
%%--------------------------------------------------------------------&#13;
%% Function: init_per_suite(Config0) -&gt;&#13;
%%               Config1 | {skip,Reason} | {skip_and_save,Reason,Config1}&#13;
%%&#13;
%% Config0 = Config1 = [tuple()]&#13;
%%   A list of key/value pairs, holding the test case configuration.&#13;
%% Reason = term()&#13;
%%   The reason for skipping the suite.&#13;
%%&#13;
%% Description: Initialization before the suite.&#13;
%%&#13;
%% Note: This function is free to add any key/value pairs to the Config&#13;
%% variable, but should NOT alter/remove any existing entries.&#13;
%%--------------------------------------------------------------------&#13;
init_per_suite(Config) -&gt;&#13;
    Config.&#13;
&#13;
%%--------------------------------------------------------------------&#13;
%% Function: end_per_suite(Config0) -&gt; void() | {save_config,Config1}&#13;
%%&#13;
%% Config0 = Config1 = [tuple()]&#13;
%%   A list of key/value pairs, holding the test case configuration.&#13;
%%&#13;
%% Description: Cleanup after the suite.&#13;
%%--------------------------------------------------------------------&#13;
end_per_suite(_Config) -&gt;&#13;
    ok.&#13;
&#13;
%%--------------------------------------------------------------------&#13;
%% Function: init_per_group(GroupName, Config0) -&gt;&#13;
%%               Config1 | {skip,Reason} | {skip_and_save,Reason,Config1}&#13;
%%&#13;
%% GroupName = atom()&#13;
%%   Name of the test case group that is about to run.&#13;
%% Config0 = Config1 = [tuple()]&#13;
%%   A list of key/value pairs, holding configuration data for the group.&#13;
%% Reason = term()&#13;
%%   The reason for skipping all test cases and subgroups in the group.&#13;
%%&#13;
%% Description: Initialization before each test case group.&#13;
%%--------------------------------------------------------------------&#13;
init_per_group(_GroupName, Config) -&gt;&#13;
    Config.&#13;
&#13;
%%--------------------------------------------------------------------&#13;
%% Function: end_per_group(GroupName, Config0) -&gt;&#13;
%%               void() | {save_config,Config1}&#13;
%%&#13;
%% GroupName = atom()&#13;
%%   Name of the test case group that is finished.&#13;
%% Config0 = Config1 = [tuple()]&#13;
%%   A list of key/value pairs, holding configuration data for the group.&#13;
%%&#13;
%% Description: Cleanup after each test case group.&#13;
%%--------------------------------------------------------------------&#13;
end_per_group(_GroupName, _Config) -&gt;&#13;
    ok.&#13;
&#13;
%%--------------------------------------------------------------------&#13;
%% Function: init_per_testcase(TestCase, Config0) -&gt;&#13;
%%               Config1 | {skip,Reason} | {skip_and_save,Reason,Config1}&#13;
%%&#13;
%% TestCase = atom()&#13;
%%   Name of the test case that is about to run.&#13;
%% Config0 = Config1 = [tuple()]&#13;
%%   A list of key/value pairs, holding the test case configuration.&#13;
%% Reason = term()&#13;
%%   The reason for skipping the test case.&#13;
%%&#13;
%% Description: Initialization before each test case.&#13;
%%&#13;
%% Note: This function is free to add any key/value pairs to the Config&#13;
%% variable, but should NOT alter/remove any existing entries.&#13;
%%--------------------------------------------------------------------&#13;
init_per_testcase(_TestCase, Config) -&gt;&#13;
    Config.&#13;
&#13;
%%--------------------------------------------------------------------&#13;
%% Function: end_per_testcase(TestCase, Config0) -&gt;&#13;
%%               void() | {save_config,Config1} | {fail,Reason}&#13;
%%&#13;
%% TestCase = atom()&#13;
%%   Name of the test case that is finished.&#13;
%% Config0 = Config1 = [tuple()]&#13;
%%   A list of key/value pairs, holding the test case configuration.&#13;
%% Reason = term()&#13;
%%   The reason for failing the test case.&#13;
%%&#13;
%% Description: Cleanup after each test case.&#13;
%%--------------------------------------------------------------------&#13;
end_per_testcase(_TestCase, _Config) -&gt;&#13;
    ok.&#13;
&#13;
%%--------------------------------------------------------------------&#13;
%% Function: groups() -&gt; [Group]&#13;
%%&#13;
%% Group = {GroupName,Properties,GroupsAndTestCases}&#13;
%% GroupName = atom()&#13;
%%   The name of the group.&#13;
%% Properties = [parallel | sequence | Shuffle | {RepeatType,N}]&#13;
%%   Group properties that may be combined.&#13;
%% GroupsAndTestCases = [Group | {group,GroupName} | TestCase]&#13;
%% TestCase = atom()&#13;
%%   The name of a test case.&#13;
%% Shuffle = shuffle | {shuffle,Seed}&#13;
%%   To get cases executed in random order.&#13;
%% Seed = {integer(),integer(),integer()}&#13;
%% RepeatType = repeat | repeat_until_all_ok | repeat_until_all_fail |&#13;
%%              repeat_until_any_ok | repeat_until_any_fail&#13;
%%   To get execution of cases repeated.&#13;
%% N = integer() | forever&#13;
%%&#13;
%% Description: Returns a list of test case group definitions.&#13;
%%--------------------------------------------------------------------&#13;
groups() -&gt;&#13;
    [].&#13;
&#13;
%%--------------------------------------------------------------------&#13;
%% Function: all() -&gt; GroupsAndTestCases | {skip,Reason}&#13;
%%&#13;
%% GroupsAndTestCases = [{group,GroupName} | TestCase]&#13;
%% GroupName = atom()&#13;
%%   Name of a test case group.&#13;
%% TestCase = atom()&#13;
%%   Name of a test case.&#13;
%% Reason = term()&#13;
%%   The reason for skipping all groups and test cases.&#13;
%%&#13;
%% Description: Returns the list of groups and test cases that&#13;
%%              are to be executed.&#13;
%%--------------------------------------------------------------------&#13;
all() -&gt; &#13;
    [my_test_case].&#13;
&#13;
&#13;
%%--------------------------------------------------------------------&#13;
%% TEST CASES&#13;
%%--------------------------------------------------------------------&#13;
&#13;
%%--------------------------------------------------------------------&#13;
%% Function: TestCase() -&gt; Info&#13;
%%&#13;
%% Info = [tuple()]&#13;
%%   List of key/value pairs.&#13;
%%&#13;
%% Description: Test case info function - returns list of tuples to set&#13;
%%              properties for the test case.&#13;
%%&#13;
%% Note: This function is only meant to be used to return a list of&#13;
%% values, not perform any other operations.&#13;
%%--------------------------------------------------------------------&#13;
my_test_case() -&gt; &#13;
    [].&#13;
&#13;
%%--------------------------------------------------------------------&#13;
%% Function: TestCase(Config0) -&gt;&#13;
%%               ok | exit() | {skip,Reason} | {comment,Comment} |&#13;
%%               {save_config,Config1} | {skip_and_save,Reason,Config1}&#13;
%%&#13;
%% Config0 = Config1 = [tuple()]&#13;
%%   A list of key/value pairs, holding the test case configuration.&#13;
%% Reason = term()&#13;
%%   The reason for skipping the test case.&#13;
%% Comment = term()&#13;
%%   A comment about the test case that will be printed in the html log.&#13;
%%&#13;
%% Description: Test case function. (The name of it must be specified in&#13;
%%              the all/0 list or in a test case group for the test case&#13;
%%              to be executed).&#13;
%%--------------------------------------------------------------------&#13;
my_test_case(_Config) -&gt; &#13;
    ok.</template><template autoinsert="true" context="org.erlide.ui.erlangsource.template.context.module" deleted="false" description="General RTES Module" enabled="true" name="rtes_module">%% Author: ${user}&#13;
%% Created: ${date}&#13;
%% Description: TODO: Add description to ${module}&#13;
-module(${module}).&#13;
&#13;
%%===========================================================================&#13;
%% Include files&#13;
%%===========================================================================&#13;
&#13;
%%===========================================================================&#13;
%% Exported Functions&#13;
%%===========================================================================&#13;
-export([${exports}]).&#13;
&#13;
%%===========================================================================&#13;
%% API Functions&#13;
%%===========================================================================&#13;
&#13;
${exported_functions}&#13;
&#13;
%%===========================================================================&#13;
%% Local Functions&#13;
%%===========================================================================&#13;
&#13;
${local_functions}</template><template autoinsert="true" context="org.erlide.ui.erlangsource.template.context.module" deleted="false" description="RTES Rules Impl" enabled="true" name="rtes_rules_impl">%% Author: ${user}&#13;
%% Created: ${date}&#13;
%% Description: TODO: Add description to ${module}&#13;
-module(${module}).&#13;
&#13;
%%-------------------------------------------------------------------------------------------------------------------------&#13;
%% Include files&#13;
%%-------------------------------------------------------------------------------------------------------------------------&#13;
&#13;
%%-include( "current_rules_domain_records_goes_here.hrl" ).&#13;
-include_lib("rtes_rules_engine/include/rtes_rules.hrl").&#13;
-include_lib("rtes_rules_engine/include/rtes_rules_client.hrl").&#13;
&#13;
%%-------------------------------------------------------------------------------------------------------------------------&#13;
%% Rule Saliences&#13;
%%-------------------------------------------------------------------------------------------------------------------------&#13;
-salience( {sample_rule, 5000} ).&#13;
&#13;
%%-------------------------------------------------------------------------------------------------------------------------&#13;
%% Exported Functions&#13;
%%-------------------------------------------------------------------------------------------------------------------------&#13;
-export([sample_rule/2]).&#13;
-export([]).&#13;
-export([]).&#13;
&#13;
%%-------------------------------------------------------------------------------------------------------------------------&#13;
%% Rule Definition Functions&#13;
%%-------------------------------------------------------------------------------------------------------------------------&#13;
&#13;
%%-------------------------------------------------------------------------------------------------------------------------&#13;
%% Sample Rule Definition: The following functions are typically called by rule action&#13;
%%&#13;
%%		rtes_rules_transaction:assert( Rule_Session, Fact_Or_Facts ),&#13;
%%		rtes_rules_transaction:retract( Rule_Session, Fact_Or_Facts ),&#13;
%%		rtes_rules_kv_store:put( Rule_Session, Key, Value)&#13;
%%-------------------------------------------------------------------------------------------------------------------------&#13;
sample_rule( _Rule_Session, _Some_Rule_Fact_Comes_Here ) when some_rule_condition =/= false -&gt;&#13;
	rule_action_goes_here,&#13;
	ok.&#13;
																					&#13;
</template><template autoinsert="true" context="org.erlide.ui.erlangsource.template.context.module" deleted="false" description="RTES Service" enabled="true" name="rtes_service">%% Author: ${user}&#13;
%% Created: ${date}&#13;
%% Description: TODO: Add description to ${module}&#13;
-module( ${module} ).&#13;
&#13;
%%===========================================================================&#13;
%% Include files&#13;
%%===========================================================================&#13;
&#13;
%%===========================================================================&#13;
%% Exported Functions&#13;
%%===========================================================================&#13;
-export([new_job_id/1]).&#13;
-export([service/2]).&#13;
-export([response_to_json/3]).&#13;
-export([request_to_args/2]).&#13;
&#13;
%%===========================================================================&#13;
%% API Functions&#13;
%%===========================================================================&#13;
request_to_args( _Service_Context,  [{header,_}, {body, {request, Req } } ] ) -&gt;&#13;
	[ Req ].&#13;
&#13;
new_job_id( _Input ) -&gt;&#13;
	rtes_util:uuid( ?MODULE ).&#13;
&#13;
response_to_json( Service_Context,  _, {result, JID, {success, _}} ) -&gt;&#13;
    Service_Name = Service_Context:get_service_name(),&#13;
	Resp_Tuple = [{header, [ {result, success}, &#13;
							 {service_name, Service_Name},&#13;
							 {job_id, JID} ]},&#13;
				  {body, {response, {result, success}} }],&#13;
	&#13;
	rtes_json_util:to_json( Resp_Tuple );&#13;
response_to_json( Service_Context,  _, {result, JID, {error, Reason}} ) -&gt;&#13;
    Service_Name = Service_Context:get_service_name(),&#13;
	Resp_Tuple = [{header, [ {result, error}, &#13;
							 {service_name, Service_Name},&#13;
							 {job_id, JID} ]},&#13;
				  {body, {response, {error, [{message, rtes_json_util:to_json_type(Reason)}]}} }],&#13;
	&#13;
	rtes_json_util:to_json( Resp_Tuple ).&#13;
&#13;
service( Service_Context,  Incident_Attrs ) -&gt;&#13;
	_Attribute = Service_Context:get_attribute( some_attribute ),&#13;
	Result = try&#13;
				 do_service_logic,&#13;
				 {success, ok}&#13;
			 catch&#13;
				 _:{error, Reason} -&gt;&#13;
					 {error, Reason};&#13;
				 _:R -&gt;&#13;
					 {error, R}&#13;
			 end,&#13;
	Service_Context:reply( Result ),&#13;
	Service_Context:service_completed(),&#13;
	Result.</template><template autoinsert="true" context="org.erlide.ui.erlangsource.template.context.module" deleted="false" description="RTES Test Coverage Runner" enabled="true" name="rtes_test_coverage_runner">%%%-------------------------------------------------------------------&#13;
%%% Author  : ${user}&#13;
%%% Description : ${module}&#13;
%%%&#13;
%%% Created : ${date}&#13;
%%%-------------------------------------------------------------------&#13;
-module(${module}).&#13;
&#13;
%%-----------------------------------------------------------------------------------------------------------------------------&#13;
%% Exported Functions&#13;
%%-----------------------------------------------------------------------------------------------------------------------------&#13;
-export([run_n_exit_node/1]).&#13;
-export([run/0]).&#13;
-export([run/1]).&#13;
-export([set_up/0]).&#13;
&#13;
%%-----------------------------------------------------------------------------------------------------------------------------&#13;
%% This function should only be used when an erlang shell is needed just to run tests&#13;
%% and get terminated after running the tests.&#13;
%%&#13;
%%Note that this function calls init:stop() which terminate the current erlang node&#13;
%%For example, this function can be called from Erlang Run Configurations within Eclipse as Erlang startup function&#13;
%%&#13;
%% erl -pa ./ebin -s module run_n_exit_node&#13;
%%-----------------------------------------------------------------------------------------------------------------------------&#13;
run_n_exit_node( Dir ) -&gt;&#13;
	run( Dir ),&#13;
	init:stop().&#13;
&#13;
%%-----------------------------------------------------------------------------------------------------------------------------&#13;
%%This function is a util function and can be run from within an erlang shell.&#13;
%%This can be used when test coverage reports have to be created while working in an erlang shell&#13;
%%without having to terminate the shell&#13;
%%-----------------------------------------------------------------------------------------------------------------------------&#13;
run() -&gt;&#13;
	run( "." ).&#13;
	&#13;
run( Dir ) -&gt;&#13;
	Src_Dirs = [ filename:join( Dir, "src" ) ],&#13;
	Suites_Dir = filename:join( Dir, "test" ),&#13;
	Beams_Dir = filename:join( Dir, "ebin" ),&#13;
	Include_Dirs = [ filename:join( Dir, "include" ) ], &#13;
	&#13;
	Results_Dir = filename:join( Dir, "test_coverage" ),&#13;
											 &#13;
	try&#13;
		set_up(),&#13;
		&#13;
		rtes_test_coverage_util:run_test_suites( Src_Dirs, &#13;
												 Suites_Dir, &#13;
												 Beams_Dir,&#13;
												 Include_Dirs,&#13;
												 Results_Dir )&#13;
	catch&#13;
		_:Reason -&gt;&#13;
			Stc_Trace = erlang:get_stacktrace(),&#13;
			&#13;
			{ok, Dev} = file:open( "test_coverage_errors.txt", [write] ),&#13;
			io:format( Dev, "~p~n~n", [Reason] ),&#13;
			io:format( Dev, "~p~n", [Stc_Trace] ),&#13;
			file:close( Dev )&#13;
	end.&#13;
&#13;
%%-----------------------------------------------------------------------------------------------------------------------------&#13;
%%Set up the required environment to run tests.	&#13;
%%This is the place where initialization of resources common to all tests.&#13;
%%Examples include setting up rules environment and then creating rules base context&#13;
%%The following are sample code snippets&#13;
%%		rtes_rules_cep_env:init(),&#13;
%%		rtes_rules_base:start( bank_loan_rules ),&#13;
%%		rtes_rules_base:add_all_rules( bank_loan_rules, bank_loan_rules )&#13;
%%-----------------------------------------------------------------------------------------------------------------------------&#13;
set_up() -&gt;&#13;
	ok.&#13;
</template><template autoinsert="true" context="org.erlide.ui.erlangsource.template.context.module" deleted="false" description="RTES WebSocket" enabled="true" name="rtes_websocket_impl">%%% -------------------------------------------------------------------&#13;
%%% Author  : ${user}&#13;
%%% Description : TODO add description for ${module}&#13;
%%%&#13;
%%% Created : ${date}&#13;
%%% -------------------------------------------------------------------&#13;
-module( ${module} ).&#13;
&#13;
-behaviour( rtes_websocket_handler_behavior ).&#13;
&#13;
-behaviour(gen_event).&#13;
&#13;
-type text()::list().&#13;
%%&#13;
%% Include files&#13;
%%&#13;
&#13;
-record( state, {jid, websocket_pid, handshake_ref } ).&#13;
%%&#13;
%% Exported Functions&#13;
%%&#13;
-export([handshake_ref/1]).&#13;
-export([init/3]).&#13;
-export([on_message/3]).&#13;
-export([ws_terminate/2]).&#13;
&#13;
%% gen_event callbacks&#13;
-export([init/1, handle_event/2, handle_call/2, handle_info/2, terminate/2, code_change/3]).&#13;
&#13;
%%&#13;
%% RTES WebSocket bridge for Cowboy will call this function to&#13;
%% get a unique handshake reference that it will use for subsequent callbacks.&#13;
%% Handshake reference will be used as an handle for all interactions/callbacks&#13;
%% between RTES WebSocket bridge and this Module.&#13;
%%&#13;
-spec handshake_ref( term() ) -&gt; term().&#13;
handshake_ref( _Module_Specific_Config_Options ) -&gt; &#13;
	%%A unique custom reference id can also be created instead of erlang ref!!&#13;
	erlang:make_ref().&#13;
&#13;
%%&#13;
%% RTES Web Socket bridge for Cowboy will call this function after&#13;
%% retrieving a handshake reference. This function call is where&#13;
%% the current module can store both reference handle and WebSocket&#13;
%% Process ID in some form of State so that it can be used to either&#13;
%% Send or Receive messages asynchronously.&#13;
%%&#13;
%% If this Module has to send a message to the client of the WebSocket, it can send a message using the WebSocket&#13;
%% PID as follows:&#13;
%%&#13;
%% PID ! Response_Msg where Response_Msg is of type:&#13;
%%		{HandShake_Ref, text, text()} |&#13;
%%		{HandShake_Ref, text, text(), true|false} |&#13;
%%		{HandShake_Ref, binary, binary()} |&#13;
%%		{HandShake_Ref, binary, binary(), true|false} |&#13;
%% 		{HandShake_Ref, close | pong, list()|binary()|term()} |&#13;
%%		{HandShake_Ref, close | pong, list()|binary()|term(), true|false} |&#13;
%%		{HandShake_Ref, ok, true|false} | {HandShake_Ref, shutdown}&#13;
%%&#13;
%% Return value of shutdown would terminate the WebSocket closing the connection immediately.&#13;
%% Likewise, a return type in {HandShake_Ref, close, Resp} would send the response back to the client and then shutdown&#13;
%% the connection.&#13;
%%&#13;
%%&#13;
-spec init( term(), pid(), term() ) -&gt; ok.&#13;
init( HandShake_Ref, WebSocket_PID, Message_From_Client ) -&gt;&#13;
	rtes_events:add_handler( {?MODULE, HandShake_Ref}, [HandShake_Ref, WebSocket_PID, Message_From_Client] ).&#13;
&#13;
%% The specification of the function is as follows:&#13;
%%&#13;
%% on_message( term()::HandShake_Ref, atom()::text | binary | ping | pong, binary()::Msg ) -&gt;&#13;
%%    {reply, atom()::text | binary | close | pong, list()|binary()|term()::Resp_Msg} |&#13;
%%	{reply, atom()::text | binary | close | pong, list()|binary()|term()::Resp_Msg, true | false::Hibernate} |&#13;
%%	ok | {ok, true | false::Hibernate} | shutdown.&#13;
%%&#13;
%% RTES WebSocket bridge will call this function on receiving a message from the client indicating type of&#13;
%% message - text, binary, ping or pong. In all cases, actual message payload is in binary format. Function can&#13;
%% process the message based on the type and return appropriate response.  &#13;
%% &#13;
%% Optionally function can indicate if the WebSocket should be hibernate by returning the boolean true or false in&#13;
%% response tuple. &#13;
%%&#13;
%% Return value of shutdown would terminate the WebSocket closing the connection immediately.&#13;
%% Likewise, a return value of type {reply, close, Resp} would send the response back to the client and then shutdown&#13;
%% the connection.&#13;
%%&#13;
%% If the Response message is of generic erlang type such as tuple or list of terms etc, RTES bridge would first stringify&#13;
%% the term and return the string value to the client.&#13;
-spec on_message( term(), text | binary | ping | pong, binary() ) -&gt; {reply, text, text()} |&#13;
																	 {reply, text, text(), true|false} |&#13;
																	 {reply, binary, binary()} |&#13;
																	 {reply, binary, binary(), true|false} |&#13;
		  															 {reply, close | pong, list()|binary()|term()} | &#13;
																	 {reply, close | pong, list()|binary()|term(), true|false} |&#13;
																	 ok | {ok, true|false} | shutdown.&#13;
on_message( HandShake_Ref, Msg_Type, Msg ) -&gt;&#13;
	rtes_events:publish( {HandShake_Ref, Msg_Type, Msg } ),&#13;
	ok.&#13;
&#13;
%%&#13;
%% RTES WebSocket bridge calls this function if the WebSocket is terminated or shutdown by&#13;
%% passing the Handshake reference and a reason for termination.&#13;
%%&#13;
%% This function call is where this Module can clean up any resources such as event handlers or gen servers&#13;
%% that were associated with handling WebSocket messaging and also clear any other related State.&#13;
%%&#13;
-spec ws_terminate( term(), term() ) -&gt; ok.&#13;
ws_terminate( HandShake_Ref, Reason ) -&gt;&#13;
	rtes_events:delete_handler( {?MODULE, HandShake_Ref}, Reason ),&#13;
	ok.&#13;
&#13;
%% ====================================================================&#13;
%% Server functions&#13;
%% ====================================================================&#13;
%% --------------------------------------------------------------------&#13;
%% Func: init/1&#13;
%% Returns: {ok, State}          |&#13;
%%          Other&#13;
%% --------------------------------------------------------------------&#13;
init( [ Handshake_Ref, WebSocket_PID, _Message_From_Client] ) -&gt;&#13;
	%%do_something_with_message_from_client,&#13;
	{ok, #state{ handshake_ref=Handshake_Ref, websocket_pid=WebSocket_PID }}.&#13;
&#13;
%% --------------------------------------------------------------------&#13;
%% Func: handle_event/2&#13;
%% Returns: {ok, State}                                |&#13;
%%          {swap_handler, Args1, State1, Mod2, Args2} |&#13;
%%          remove_handler&#13;
%% --------------------------------------------------------------------&#13;
handle_event( {_Handshake_Ref, _, _Msg},&#13;
			  #state{ handshake_ref=_Handshake_Ref,&#13;
					  websocket_pid=_WebSocket_PID } = State ) -&gt;&#13;
	%%do something with the incoming message from websocket client&#13;
	%%and send processing results back again using PID&#13;
	%%in case of errors and if websocket has to be shutdown&#13;
	%%send shutdown message&#13;
	%%&#13;
	%%    WebSocket_PID ! Response_Msg where Response_Msg is of type:&#13;
	%%		{HandShake_Ref, text, text()} |&#13;
	%%		{HandShake_Ref, text, text(), true|false} |&#13;
	%%		{HandShake_Ref, binary, binary()} |&#13;
	%%		{HandShake_Ref, binary, binary(), true|false} |&#13;
	%% 		{HandShake_Ref, close | pong, list()|binary()|term()} |&#13;
	%%		{HandShake_Ref, close | pong, list()|binary()|term(), true|false} |&#13;
	%%		{HandShake_Ref, ok, true|false} | {HandShake_Ref, shutdown}&#13;
	%%    &#13;
	{ok,State};&#13;
handle_event( {example_only_json_message_from_backend, JID, JSON },&#13;
			  #state{ jid=JID,&#13;
					  handshake_ref=Handshake_Ref,&#13;
					  websocket_pid=WebSocket_PID } = State ) -&gt;&#13;
	WebSocket_PID ! {Handshake_Ref, text, JSON},&#13;
	{ok, State};&#13;
handle_event( {job_completed, JID},&#13;
			  #state{ jid=JID,&#13;
					  handshake_ref=Handshake_Ref,&#13;
					  websocket_pid=WebSocket_PID } ) -&gt;&#13;
	WebSocket_PID ! {Handshake_Ref, shutdown},&#13;
	remove_handler;&#13;
handle_event( _Evt, State ) -&gt;&#13;
	{ok,State}.&#13;
&#13;
%% --------------------------------------------------------------------&#13;
%% Func: handle_call/2&#13;
%% Returns: {ok, Reply, State}                                |&#13;
%%          {swap_handler, Reply, Args1, State1, Mod2, Args2} |&#13;
%%          {remove_handler, Reply}&#13;
%% --------------------------------------------------------------------&#13;
handle_call(_Request, State) -&gt;&#13;
	Reply = ok,&#13;
	{ok, Reply, State}.&#13;
&#13;
%% --------------------------------------------------------------------&#13;
%% Func: handle_info/2&#13;
%% Returns: {ok, State}                                |&#13;
%%          {swap_handler, Args1, State1, Mod2, Args2} |&#13;
%%          remove_handler&#13;
%% --------------------------------------------------------------------&#13;
handle_info(_Info, State) -&gt;&#13;
	{ok, State}.&#13;
&#13;
%% --------------------------------------------------------------------&#13;
%% Func: terminate/2&#13;
%% Purpose: Shutdown the server&#13;
%% Returns: any&#13;
%% --------------------------------------------------------------------&#13;
terminate(_Reason, _State ) -&gt;&#13;
	ok.&#13;
&#13;
%% --------------------------------------------------------------------&#13;
%% Func: code_change/3&#13;
%% Purpose: Convert process state when code is changed&#13;
%% Returns: {ok, NewState}&#13;
%% --------------------------------------------------------------------&#13;
code_change(_OldVsn, State, _Extra) -&gt;&#13;
	{ok, State}.</template></templates>