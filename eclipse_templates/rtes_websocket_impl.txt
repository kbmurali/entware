%%% -------------------------------------------------------------------
%%% Author  : ${user}
%%% Description : TODO add description for ${module}
%%%
%%% Created : ${date}
%%% -------------------------------------------------------------------
-module( ${module} ).

-behaviour( rtes_websocket_handler_behavior ).

-behaviour(gen_event).

-type text()::list().
%%
%% Include files
%%

-record( state, {jid, websocket_pid, handshake_ref } ).
%%
%% Exported Functions
%%
-export([handshake_ref/1]).
-export([init/3]).
-export([on_message/3]).
-export([ws_terminate/2]).

%% gen_event callbacks
-export([init/1, handle_event/2, handle_call/2, handle_info/2, terminate/2, code_change/3]).

%%
%% RTES WebSocket bridge for Cowboy will call this function to
%% get a unique handshake reference that it will use for subsequent callbacks.
%% Handshake reference will be used as an handle for all interactions/callbacks
%% between RTES WebSocket bridge and this Module.
%%
-spec handshake_ref( term() ) -> term().
handshake_ref( _Module_Specific_Config_Options ) -> 
	%%A unique custom reference id can also be created instead of erlang ref!!
	erlang:make_ref().

%%
%% RTES Web Socket bridge for Cowboy will call this function after
%% retrieving a handshake reference. This function call is where
%% the current module can store both reference handle and WebSocket
%% Process ID in some form of State so that it can be used to either
%% Send or Receive messages asynchronously.
%%
%% If this Module has to send a message to the client of the WebSocket, it can send a message using the WebSocket
%% PID as follows:
%%
%% PID ! Response_Msg where Response_Msg is of type:
%%		{HandShake_Ref, text, text()} |
%%		{HandShake_Ref, text, text(), true|false} |
%%		{HandShake_Ref, binary, binary()} |
%%		{HandShake_Ref, binary, binary(), true|false} |
%% 		{HandShake_Ref, close | pong, list()|binary()|term()} |
%%		{HandShake_Ref, close | pong, list()|binary()|term(), true|false} |
%%		{HandShake_Ref, ok, true|false} | {HandShake_Ref, shutdown}
%%
%% Return value of shutdown would terminate the WebSocket closing the connection immediately.
%% Likewise, a return type in {HandShake_Ref, close, Resp} would send the response back to the client and then shutdown
%% the connection.
%%
%%
-spec init( term(), pid(), term() ) -> ok.
init( HandShake_Ref, WebSocket_PID, Message_From_Client ) ->
	rtes_events:add_handler( {?MODULE, HandShake_Ref}, [HandShake_Ref, WebSocket_PID, Message_From_Client] ).

%% The specification of the function is as follows:
%%
%% on_message( term()::HandShake_Ref, atom()::text | binary | ping | pong, binary()::Msg ) ->
%%    {reply, atom()::text | binary | close | pong, list()|binary()|term()::Resp_Msg} |
%%	{reply, atom()::text | binary | close | pong, list()|binary()|term()::Resp_Msg, true | false::Hibernate} |
%%	ok | {ok, true | false::Hibernate} | shutdown.
%%
%% RTES WebSocket bridge will call this function on receiving a message from the client indicating type of
%% message - text, binary, ping or pong. In all cases, actual message payload is in binary format. Function can
%% process the message based on the type and return appropriate response.  
%% 
%% Optionally function can indicate if the WebSocket should be hibernate by returning the boolean true or false in
%% response tuple. 
%%
%% Return value of shutdown would terminate the WebSocket closing the connection immediately.
%% Likewise, a return value of type {reply, close, Resp} would send the response back to the client and then shutdown
%% the connection.
%%
%% If the Response message is of generic erlang type such as tuple or list of terms etc, RTES bridge would first stringify
%% the term and return the string value to the client.
-spec on_message( term(), text | binary | ping | pong, binary() ) -> {reply, text, text()} |
																	 {reply, text, text(), true|false} |
																	 {reply, binary, binary()} |
																	 {reply, binary, binary(), true|false} |
		  															 {reply, close | pong, list()|binary()|term()} | 
																	 {reply, close | pong, list()|binary()|term(), true|false} |
																	 ok | {ok, true|false} | shutdown.
on_message( HandShake_Ref, Msg_Type, Msg ) ->
	rtes_events:publish( {HandShake_Ref, Msg_Type, Msg } ),
	ok.

%%
%% RTES WebSocket bridge calls this function if the WebSocket is terminated or shutdown by
%% passing the Handshake reference and a reason for termination.
%%
%% This function call is where this Module can clean up any resources such as event handlers or gen servers
%% that were associated with handling WebSocket messaging and also clear any other related State.
%%
-spec ws_terminate( term(), term() ) -> ok.
ws_terminate( HandShake_Ref, Reason ) ->
	rtes_events:delete_handler( {?MODULE, HandShake_Ref}, Reason ),
	ok.

%% ====================================================================
%% Server functions
%% ====================================================================
%% --------------------------------------------------------------------
%% Func: init/1
%% Returns: {ok, State}          |
%%          Other
%% --------------------------------------------------------------------
init( [ Handshake_Ref, WebSocket_PID, _Message_From_Client] ) ->
	%%do_something_with_message_from_client,
	{ok, #state{ handshake_ref=Handshake_Ref, websocket_pid=WebSocket_PID }}.

%% --------------------------------------------------------------------
%% Func: handle_event/2
%% Returns: {ok, State}                                |
%%          {swap_handler, Args1, State1, Mod2, Args2} |
%%          remove_handler
%% --------------------------------------------------------------------
handle_event( {_Handshake_Ref, _, _Msg},
			  #state{ handshake_ref=_Handshake_Ref,
					  websocket_pid=_WebSocket_PID } = State ) ->
	%%do something with the incoming message from websocket client
	%%and send processing results back again using PID
	%%in case of errors and if websocket has to be shutdown
	%%send shutdown message
	%%
	%%    WebSocket_PID ! Response_Msg where Response_Msg is of type:
	%%		{HandShake_Ref, text, text()} |
	%%		{HandShake_Ref, text, text(), true|false} |
	%%		{HandShake_Ref, binary, binary()} |
	%%		{HandShake_Ref, binary, binary(), true|false} |
	%% 		{HandShake_Ref, close | pong, list()|binary()|term()} |
	%%		{HandShake_Ref, close | pong, list()|binary()|term(), true|false} |
	%%		{HandShake_Ref, ok, true|false} | {HandShake_Ref, shutdown}
	%%    
	{ok,State};
handle_event( {example_only_json_message_from_backend, JID, JSON },
			  #state{ jid=JID,
					  handshake_ref=Handshake_Ref,
					  websocket_pid=WebSocket_PID } = State ) ->
	WebSocket_PID ! {Handshake_Ref, text, JSON},
	{ok, State};
handle_event( {job_completed, JID},
			  #state{ jid=JID,
					  handshake_ref=Handshake_Ref,
					  websocket_pid=WebSocket_PID } ) ->
	WebSocket_PID ! {Handshake_Ref, shutdown},
	remove_handler;
handle_event( _Evt, State ) ->
	{ok,State}.

%% --------------------------------------------------------------------
%% Func: handle_call/2
%% Returns: {ok, Reply, State}                                |
%%          {swap_handler, Reply, Args1, State1, Mod2, Args2} |
%%          {remove_handler, Reply}
%% --------------------------------------------------------------------
handle_call(_Request, State) ->
	Reply = ok,
	{ok, Reply, State}.

%% --------------------------------------------------------------------
%% Func: handle_info/2
%% Returns: {ok, State}                                |
%%          {swap_handler, Args1, State1, Mod2, Args2} |
%%          remove_handler
%% --------------------------------------------------------------------
handle_info(_Info, State) ->
	{ok, State}.

%% --------------------------------------------------------------------
%% Func: terminate/2
%% Purpose: Shutdown the server
%% Returns: any
%% --------------------------------------------------------------------
terminate(_Reason, _State ) ->
	ok.

%% --------------------------------------------------------------------
%% Func: code_change/3
%% Purpose: Convert process state when code is changed
%% Returns: {ok, NewState}
%% --------------------------------------------------------------------
code_change(_OldVsn, State, _Extra) ->
	{ok, State}.