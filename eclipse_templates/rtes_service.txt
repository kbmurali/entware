%% Author: ${user}
%% Created: ${date}
%% Description: TODO: Add description to ${module}
-module( ${module} ).

%%===========================================================================
%% Include files
%%===========================================================================

%%===========================================================================
%% Exported Functions
%%===========================================================================
-export([new_job_id/1]).
-export([service/2]).
-export([response_to_json/3]).
-export([request_to_args/2]).

%%===========================================================================
%% API Functions
%%===========================================================================
request_to_args( _Service_Context,  [{header,_}, {body, {request, Req } } ] ) ->
	[ Req ].

new_job_id( _Input ) ->
	rtes_util:uuid( ?MODULE ).

response_to_json( Service_Context,  _, {result, JID, {success, _}} ) ->
    Service_Name = Service_Context:get_service_name(),
	Resp_Tuple = [{header, [ {result, success}, 
							 {service_name, Service_Name},
							 {job_id, JID} ]},
				  {body, {response, {result, success}} }],
	
	rtes_json_util:to_json( Resp_Tuple );
response_to_json( Service_Context,  _, {result, JID, {error, Reason}} ) ->
    Service_Name = Service_Context:get_service_name(),
	Resp_Tuple = [{header, [ {result, error}, 
							 {service_name, Service_Name},
							 {job_id, JID} ]},
				  {body, {response, {error, [{message, rtes_json_util:to_json_type(Reason)}]}} }],
	
	rtes_json_util:to_json( Resp_Tuple ).

service( Service_Context,  Incident_Attrs ) ->
	_Attribute = Service_Context:get_attribute( some_attribute ),
	Result = try
				 do_service_logic,
				 {success, ok}
			 catch
				 _:{error, Reason} ->
					 {error, Reason};
				 _:R ->
					 {error, R}
			 end,
	Service_Context:reply( Result ),
	Service_Context:service_completed(),
	Result.